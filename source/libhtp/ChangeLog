
0.5.9 (19 November 2013)
------------------------

- Fixed a HTP_HOST_AMBIGUOUS false positive.

- Fixed the tests not compiling on OS X 10.9.


0.5.8 (21 October 2013)
-----------------------

- Fixed [#54] Compression and base64 tests failing on some architectures.

- Fixed [#55] Incorrect ambiguous host warning on some CONNECT requests.


0.5.7 (18 September 2013)
-------------------------

- Use umask() with mkstemp() to ensure that temporary files are created with correct
  permissions. This addresses the potential security problem, but creates another, because
  umask() is not thread safe. For this and other reasons (see #52), file extraction will be
  removed in a future release.

- Fix copying hook_response_complete instead of hook_transaction_complete.

- Fix several small memory leaks that occur when memory allocation fails.


0.5.6 (22 July 2013)
-------------------

- Fix memory leaks in htp_tx_t::request_auth_username and htp_tx_t::request_auth_password.

- [#43] When processing the response line, treat stream closure as the end of line.

- Fix normalization when the URL begins with "./".

- Do not fail a stream with an incorrectly formed digest username.

- Do not stop processing request headers on PUT requests.


0.5.5 (18 July 2013)
--------------------

- Tagging for a Suricata beta release.

- [#46] Fix the segfault that occurs under certain conditions when an invalid hostname is supplied.

- [#44] Fix libiconv detection on OpenBSD. [Victor Julien]


0.5.4 (17 July 2013)
--------------------

- Tagging for a Suricata beta release.

- Added htp_get_version(), which returns the complete library name (e.g., "LibHTP v0.5.4").

- Hard field limit is now treated as specifying the maximum amount of memory LibHTP
  will use for buffering per stream. Fields (e.g., headers) longer than this limit
  will be accepted if they are contained within a single buffer submitted to LibHTP (i.e.,
  if LibHTP does not have to do any buffering in order to process them). Soft limits
  are currently not creating any warnings. This area will be improved in a future release.

- Invalid headers no longer fail the entire stream. They are now treated as
  headers without a name.

- htp_conn_remove_tx() now returns HTP_DECLINED (was HTTP_ERROR) if the
  specified transaction cannot be found.

- htp_list_array_replace() now returns HTP_DECLINED (was HTP_ERROR) if the element at the
  specified position does not exist.

- New public functions:

  htp_status_t htp_urldecode_inplace(htp_cfg_t *cfg, enum htp_decoder_ctx_t ctx, bstr *input, uint64_t *flags);
  htp_status_t htp_urldecode_inplace_ex(htp_cfg_t *cfg, enum htp_decoder_ctx_t ctx, bstr *input, uint64_t *flags, int *expected_status_code);

- Improved test coverage (84.1% lines, 91.3% functions).


0.5.3 (14 June 2013)
--------------------

- Fix stream error when valid Basic Authentication information is provided.

- Do not fail the entire stream if the Authorization header is invalid. Raise HTP_AUTH_INVALID instead.

- When a request does not contain the request URI, leave htp_tx_t::request_uri NULL.
